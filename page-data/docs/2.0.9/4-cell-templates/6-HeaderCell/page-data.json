{"componentChunkName":"component---src-templates-docs-post-js","path":"/docs/2.0.9/4-cell-templates/6-HeaderCell/","result":{"data":{"site":{"siteMetadata":{"title":"ReactGrid","description":"Advanced spreadsheet for developers","pages":[{"description":"","id":"home","route":"/","title":"Home","active":false},{"description":"","id":"features","route":"/features","title":"Features","active":true},{"description":"","id":"examples","route":"/examples","title":"Examples","active":true},{"description":"","id":"docs","route":"/docs","title":"Docs","active":true},{"description":"","id":"pricing","route":"/pricing","title":"Pricing","active":true},{"description":"","id":"blog","route":"/blog","title":"Blog","active":false}],"social":[{"description":"Check our github repo","fontAwesomeIcon":"fab fa-github","title":"Github","url":"https://github.com/silevis/reactgrid"},{"description":"Check our Facebook profile","fontAwesomeIcon":"fab fa-facebook-square","title":"Facebook","url":"https://www.facebook.com/silevis.software/"},{"description":"Check our npm repo","fontAwesomeIcon":"fab fa-npm","title":"npm","url":"https://www.npmjs.com/org/silevis"}],"docsVersions":[{"slug":"/2.0.9","desc":"2.0.9","index":"/0-introduction","active":true}],"docsPagesOrder":["/Za","/Tutorial","/Introduction"]}},"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"posttype\": \"docs\",\n  \"title\": \"HeaderCell\",\n  \"metaTitle\": \"HeaderCell template\",\n  \"metaDescription\": \"metaDescription\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The main purpose of this cell is marking is content as not focusable and readonly. Commonly used to mark header rows\\nand columns.\"), mdx(\"h2\", null, \"Interface declaration\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"tsx\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-tsx\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-tsx\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"interface\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"HeaderCell\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"extends\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"Cell\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"type\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token string\"\n  }), \"'header'\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \",\"), \"\\n    text\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token builtin\"\n  }), \"string\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \",\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\")))), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Property name\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Type\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Property description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"code\", _extends({\n    parentName: \"td\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"type\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"code\", _extends({\n    parentName: \"td\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"header\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Type of cell template\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"code\", _extends({\n    parentName: \"td\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"text\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"code\", _extends({\n    parentName: \"td\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"string\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Content of cell\")))), mdx(\"h2\", null, mdx(\"code\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"HeaderCellTemplate\"), \" class implementation\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"tsx\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-tsx\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-tsx\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"class\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"HeaderCellTemplate\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"implements\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"CellTemplate\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token tag\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token tag\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"<\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"HeaderCell\")), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \">\")), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token plain-text\"\n  }), \" \"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"getCompatibleCell\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), \"uncertainCell\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \" Uncertain\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token tag\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token tag\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"<\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"HeaderCell\")), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \">\")), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token plain-text\"\n  }), \"): Compatible\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token tag\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token tag\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"<\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"HeaderCell\")), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \">\")), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token plain-text\"\n  }), \" \"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"const\"), \" text \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"getCellProperty\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), \"uncertainCell\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \",\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token string\"\n  }), \"'text'\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \",\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token string\"\n  }), \"'string'\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"const\"), \" value \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"parseFloat\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), \"text\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"return\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"...\"), \"uncertainCell\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \",\"), \" text\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \",\"), \" value \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token plain-text\"\n  }), \"\\n\\n    render(cell: Compatible\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token tag\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token tag\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"<\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"HeaderCell\")), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \">\")), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token plain-text\"\n  }), \", isInEditMode: boolean, onCellChanged: (cell: Compatible\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token tag\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token tag\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"<\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"HeaderCell\")), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \">\")), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token plain-text\"\n  }), \", commit: boolean) => void): React.ReactNode \"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"return\"), \" cell\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), \"text\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token plain-text\"\n  }), \"\\n\\n    isFocusable = () => false;\\n\\n    getClassName(cell: Compatible\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token tag\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token tag\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"<\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"HeaderCell\")), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \">\")), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token plain-text\"\n  }), \", isInEditMode: boolean) \"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"return\"), \" cell\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), \"className \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"?\"), \" cell\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), \"className \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token string\"\n  }), \"''\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token plain-text\"\n  }), \"\\n\\n    getStyle = (cell: Compatible\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token tag\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token tag\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"<\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"HeaderCell\")), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \">\")), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token plain-text\"\n  }), \") => (\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \" background\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token string\"\n  }), \"'rgba(0, 0, 0, 0.20)'\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token plain-text\"\n  }), \")\\n}\\n\")))));\n}\n;\nMDXContent.isMDXComponent = true;","id":"dc037d3d-263d-522d-aacf-8c79bef23ae5","excerpt":"The main purpose of this cell is marking is content as not focusable and readonly. Commonly used to mark header rows \nand columns. Interface declaration…","frontmatter":{"title":"HeaderCell","metaDescription":"metaDescription","metaTitle":"HeaderCell template"}},"allMdx":{"edges":[{"node":{"excerpt":"ReactGrid allows you to create custom data grids inside your ReactJS application while providing\na spreadsheet-like look and feel. Supported…","fields":{"slug":"/2.0.9/0-introduction/"},"frontmatter":{"posttype":"docs","title":"Introduction","metaDescription":"metaDescription","metaTitle":"Introduction"}}},{"node":{"excerpt":"Introduction The only requirement in order to make ReactGrid work is an installed ReactJS library. 1. Install ReactGrid from npm repository…","fields":{"slug":"/2.0.9/1-getting-started/"},"frontmatter":{"posttype":"docs","title":"Getting Started","metaDescription":"metaDescription","metaTitle":"Getting Started"}}},{"node":{"excerpt":"In this part you will learn about common features and example implementations of ReactGrid features. Hangling changes Column resizing Column…","fields":{"slug":"/2.0.9/2-implementing-core-features/"},"frontmatter":{"posttype":"docs","title":"Implementing core features","metaDescription":"metaDescription","metaTitle":"Introduction"}}},{"node":{"excerpt":"Idea of handling data changes User try to change data inside cell in one of few ways (typing new value, fill handle, copy and paste, click…","fields":{"slug":"/2.0.9/2-implementing-core-features/1-handling-changes/"},"frontmatter":{"posttype":"docs","title":"Handling data changes","metaDescription":"metaDescription","metaTitle":"Handling data changes"}}},{"node":{"excerpt":"How to implement basis column resizing? Add  resizable  attribute to array of columns and set it value to  true . At this moment if you…","fields":{"slug":"/2.0.9/2-implementing-core-features/2-column-resizing/"},"frontmatter":{"posttype":"docs","title":"Column resizing","metaDescription":"metaDescription","metaTitle":"Column resizing"}}},{"node":{"excerpt":"How to implement column and row reordering? This lesson is based on  getting started . Firstly lets update imports by ading  Id…","fields":{"slug":"/2.0.9/2-implementing-core-features/3-column-and-row-reordering/"},"frontmatter":{"posttype":"docs","title":"Column and row reordering","metaDescription":"metaDescription","metaTitle":"Column and row reordering"}}},{"node":{"excerpt":"Some informations about frozens ReactGrid allows you to freeze rows to top and bottom, also column to left or right. It's possible by adding…","fields":{"slug":"/2.0.9/2-implementing-core-features/4-freezing-panes/"},"frontmatter":{"posttype":"docs","title":"Freezing panes","metaDescription":"metaDescription","metaTitle":" Freezing panes"}}},{"node":{"excerpt":"Context menu ReactGrid contains built-in custom context menu with is disabled by default. You also can create your custom actions. Enabling…","fields":{"slug":"/2.0.9/2-implementing-core-features/5-context-menu/"},"frontmatter":{"posttype":"docs","title":"Context menu","metaDescription":"metaDescription","metaTitle":"Context menu"}}},{"node":{"excerpt":"This lesson is based on  getting started . Highlights allow you to add custom CSS classes or border around.  Import  Highlight  interface…","fields":{"slug":"/2.0.9/2-implementing-core-features/6-highlights/"},"frontmatter":{"posttype":"docs","title":"Adding highlights","metaDescription":"metaDescription","metaTitle":"Adding highlights"}}},{"node":{"excerpt":"Idea of cell templates In  getting started  chapter we declared cells array as part of ReactGrid property. Each cell template has own unique…","fields":{"slug":"/2.0.9/4-cell-templates/"},"frontmatter":{"posttype":"docs","title":"Cell templates","metaDescription":"metaDescription","metaTitle":"Cell templates introduction"}}},{"node":{"excerpt":"This cell type displays checkbox input. This template has disabled edit mode. Interface declaration Property name Type Property description…","fields":{"slug":"/2.0.9/4-cell-templates/2-CheckboxCell/"},"frontmatter":{"posttype":"docs","title":"CheckboxCell","metaDescription":"metaDescription","metaTitle":"CheckboxCell template"}}},{"node":{"excerpt":"This template formats  Date  object and displays default browser date picker in edit mode.  Interface declaration Property name Type…","fields":{"slug":"/2.0.9/4-cell-templates/3-DateCell/"},"frontmatter":{"posttype":"docs","title":"DateCell","metaDescription":"metaDescription","metaTitle":"DateCell template"}}},{"node":{"excerpt":"This cell render text value with possibility to validate it's own value and wrap result into  React.ReactNode  objects. Interface…","fields":{"slug":"/2.0.9/4-cell-templates/4-EmailCell/"},"frontmatter":{"posttype":"docs","title":"EmailCell","metaDescription":"metaDescription","metaTitle":"EmailCell template"}}},{"node":{"excerpt":"  GroupCell  contains data about single node in the tree structure of the data. This cell template renders text with \n the preceding chevron…","fields":{"slug":"/2.0.9/4-cell-templates/5-GroupCell/"},"frontmatter":{"posttype":"docs","title":"GroupCell","metaDescription":"metaDescription","metaTitle":"GroupCell template"}}},{"node":{"excerpt":"The main purpose of this cell is marking is content as not focusable and readonly. Commonly used to mark header rows \nand columns. Interface…","fields":{"slug":"/2.0.9/4-cell-templates/6-HeaderCell/"},"frontmatter":{"posttype":"docs","title":"HeaderCell","metaDescription":"metaDescription","metaTitle":"HeaderCell template"}}},{"node":{"excerpt":"Displays number, this cell allow to customly format number values using  Intl.NumberFormat .  Interface declaration Property name Type…","fields":{"slug":"/2.0.9/4-cell-templates/7-NumberCell/"},"frontmatter":{"posttype":"docs","title":"NumberCell","metaDescription":"metaDescription","metaTitle":"NumberCell template"}}},{"node":{"excerpt":"This template allow to display text as a string value. Interface declaration Property name Type Property description type header Type of…","fields":{"slug":"/2.0.9/4-cell-templates/8-TextCell/"},"frontmatter":{"posttype":"docs","title":"TextCell","metaDescription":"metaDescription","metaTitle":"TextCell template"}}},{"node":{"excerpt":"This template formats  Date  object and displays default browser time picker in edit mode.\nKeep in mind:  time  attribute that stores  Date…","fields":{"slug":"/2.0.9/4-cell-templates/9-TimeCell/"},"frontmatter":{"posttype":"docs","title":"TimeCell","metaDescription":"metaDescription","metaTitle":"TimeCell interface"}}},{"node":{"excerpt":"Introduction Creating cell template is best way to customize data visualization and behaviour in ReactGrid.\nYou can define your own and then…","fields":{"slug":"/2.0.9/5-create-your-own-cell-template/"},"frontmatter":{"posttype":"docs","title":"Create your own cell template","metaDescription":"metaDescription","metaTitle":"Create your own cell template"}}},{"node":{"excerpt":"In this chapter you will know about simplest and advanced ReactGrid components styling using Sass variables. Basic styling Custom Styling…","fields":{"slug":"/2.0.9/6-styling/"},"frontmatter":{"posttype":"docs","title":"Styling","metaDescription":"metaDescription","metaTitle":"Style your ReactGrid"}}},{"node":{"excerpt":"Introduction For the correct display of the component it's required to import the basic styles contained in the  /dist  directory of…","fields":{"slug":"/2.0.9/6-styling/0-basic-styling/"},"frontmatter":{"posttype":"docs","title":"Basic styling","metaDescription":"metaDescription","metaTitle":"Basic styling"}}},{"node":{"excerpt":"ReactGrid let you to style all key components using Sass variables.  To override default styles of ReactGrid you have to assign new values…","fields":{"slug":"/2.0.9/6-styling/1-advanced-styling/"},"frontmatter":{"posttype":"docs","title":"Advanced styling","metaDescription":"metaDescription","metaTitle":"Advanced styling"}}},{"node":{"excerpt":"ReactGrid uses expanded set of variables you can override. Color related variables Colors variables Shadow variables Context menu variables…","fields":{"slug":"/2.0.9/6-styling/2-sass-variables/"},"frontmatter":{"posttype":"docs","title":"Sass variables","metaDescription":"metaDescription","metaTitle":"Sass variables"}}},{"node":{"excerpt":"ReactGrid public API contains interfaces, types and functions exported from  ReactGrid  package to compose grids,\ndefining custom behaviour…","fields":{"slug":"/2.0.9/7-api/"},"frontmatter":{"posttype":"docs","title":"Public API","metaDescription":"metaDescription","metaTitle":"Public API"}}},{"node":{"excerpt":"ReactGrid API provides following interfaces: Interfaces ReactGridProps CellChange Column Row Cell CellTemplate CellLocation MenuOption…","fields":{"slug":"/2.0.9/7-api/0-interfaces/"},"frontmatter":{"posttype":"docs","title":"Interfaces","metaDescription":"metaDescription","metaTitle":"Interfaces"}}},{"node":{"excerpt":"ReactGrid component has three essential properties which you must pass in props to render -  columns ,  rows  and  license . Definition…","fields":{"slug":"/2.0.9/7-api/0-interfaces/1-reactgrid-props/"},"frontmatter":{"posttype":"docs","title":"ReactGrid & ReactGridProps","metaDescription":"metaDescription","metaTitle":"ReactGridProps interface"}}},{"node":{"excerpt":"CellChange  interface is used by  onCellsChanged  callback in  ReactGrid  component.  Definition TCell  is type that extends common  Cell…","fields":{"slug":"/2.0.9/7-api/0-interfaces/2-cell-change/"},"frontmatter":{"posttype":"docs","title":"CellChange","metaDescription":"metaDescription","metaTitle":"CellChange interface"}}},{"node":{"excerpt":"Row interface contains two necessary properties:  rowId  and  cells . Definition Properties Property name Type Property description rowId Id…","fields":{"slug":"/2.0.9/7-api/0-interfaces/2-row/"},"frontmatter":{"posttype":"docs","title":"Row","metaDescription":"metaDescription","metaTitle":"Row interface"}}},{"node":{"excerpt":"This interface represents column in grid.  Column  interface contains only one necessary property:  columnId . Definition Properties…","fields":{"slug":"/2.0.9/7-api/0-interfaces/3-column/"},"frontmatter":{"posttype":"docs","title":"Column","metaDescription":"metaDescription","metaTitle":"Column interface"}}},{"node":{"excerpt":"Cell  interface is a basis for built-in cell templates and your own, it has only one necessary prop -  type . Definition Properties…","fields":{"slug":"/2.0.9/7-api/0-interfaces/4-cell/"},"frontmatter":{"posttype":"docs","title":"Cell","metaDescription":"metaDescription","metaTitle":"Cell interface"}}},{"node":{"excerpt":"CellTemplate  is an interface used the communication between ReactGrid and a cell. See example  implementation .\nAt this moment if you are…","fields":{"slug":"/2.0.9/7-api/0-interfaces/5-cell-template/"},"frontmatter":{"posttype":"docs","title":"CellTemplate","metaDescription":"metaDescription","metaTitle":"CellTemplate interface"}}},{"node":{"excerpt":"CellLocation  is an interface that describes focus position inside grid. Definition Properties Property name Type Property description rowId…","fields":{"slug":"/2.0.9/7-api/0-interfaces/6-cell-location/"},"frontmatter":{"posttype":"docs","title":"CellLocation","metaDescription":"metaDescription","metaTitle":"CellLocation interface"}}},{"node":{"excerpt":"CellStyle  interface prevents passing unwanted CSS properties that could broke down grid rendering. Definition Properties Property name Type…","fields":{"slug":"/2.0.9/7-api/0-interfaces/7-cell-style/"},"frontmatter":{"posttype":"docs","title":"CellStyle","metaDescription":"metaDescription","metaTitle":"CellStyle interface"}}},{"node":{"excerpt":"Context menu is part of grid, each menu option must implement interface below.  Definition Properties Property name Type Property…","fields":{"slug":"/2.0.9/7-api/0-interfaces/8-menuoption/"},"frontmatter":{"posttype":"docs","title":"MenuOption","metaDescription":"metaDescription","metaTitle":"MenuOption interface"}}},{"node":{"excerpt":"ReactGrid API provides following types: Id Compatible Uncertain UncertainCompatible DropPosition","fields":{"slug":"/2.0.9/7-api/1-types/"},"frontmatter":{"posttype":"docs","title":"Types","metaDescription":"metaDescription","metaTitle":"Types"}}},{"node":{"excerpt":"CompatibleCell  is an extended and exchangeable cell (compatible between different types).  Definition Properties Property name Type…","fields":{"slug":"/2.0.9/7-api/1-types/1-compatible-cell/"},"frontmatter":{"posttype":"docs","title":"Compatible","metaDescription":"metaDescription","metaTitle":"Compatible type"}}},{"node":{"excerpt":"Uncertain  is a cel type that every field of  TCell  optional. \nCell of this type will have only one essential field provided by  Cell…","fields":{"slug":"/2.0.9/7-api/1-types/2-uncertain-cell/"},"frontmatter":{"posttype":"docs","title":"Uncertain","metaDescription":"metaDescription","metaTitle":"Uncertain type"}}},{"node":{"excerpt":"UncertainCompatible  is a cell type that is compatible beetwen other cell types, \nbut they can be intances of various types (e.g.  DataCell…","fields":{"slug":"/2.0.9/7-api/1-types/3-uncertain-compatible-cell/"},"frontmatter":{"posttype":"docs","title":"UncertainCompatible","metaDescription":"metaDescription","metaTitle":"UncertainCompatible type"}}},{"node":{"excerpt":"Id  is a common type to identify many objects in grid e.g.:  Highlight ,  CellLocation ,   CellChange ,   Column ,  Row Id  can be an…","fields":{"slug":"/2.0.9/7-api/1-types/4-id/"},"frontmatter":{"posttype":"docs","title":"Id","metaDescription":"metaDescription","metaTitle":"Id type"}}},{"node":{"excerpt":"Indicates where row/column was dropped. Used by  ReactGridProps  callbacks. Definition","fields":{"slug":"/2.0.9/7-api/1-types/5-drop-position/"},"frontmatter":{"posttype":"docs","title":"DropPosition","metaDescription":"metaDescription","metaTitle":"DropPosition type"}}},{"node":{"excerpt":"Keycodes: Used in creating custom cell templates. Checks if  keycode  is alfanumeric. Used in creating custom cell templates. Checks if…","fields":{"slug":"/2.0.9/7-api/2-functions/"},"frontmatter":{"posttype":"docs","title":"Functions & Enums","metaDescription":"metaDescription","metaTitle":"Functions & Enums"}}},{"node":{"excerpt":"Why don’t you provide a ready to use DataTable component? This is actually a feature! We want to give you the freedom of how you want to…","fields":{"slug":"/2.0.9/8-FAQ/"},"frontmatter":{"posttype":"docs","title":"FAQ","metaDescription":"metaDescription","metaTitle":"Frequenty asked question"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2.0.9/4-cell-templates/6-HeaderCell/"}}}